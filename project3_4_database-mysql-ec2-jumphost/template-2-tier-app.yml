AWSTemplateFormatVersion: 2010-09-09
Description: >
  The template will create a new VPC with 2 public and 3 private subnets.
  Then, the template will create an Amazon EC2 instance and a Mysql DB. The AMI is chosen based
  on the region in which the stack is run. A Read Replica is created and
  a MultiAZ can be created optionally.

Parameters:
  #Parameter for VPC and Subnet

  VpcCidr:
    Description: CIDR block for the main VPC
    Type: String
    Default: 10.0.0.0/16

  Public1ACidr:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24
  
  Public1BCidr:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.2.0/24

  Private1ACidr:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.3.0/24

  Private1BCidr:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.4.0/24
  
  Private1CCidr:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.5.0/24

  #Parameter for EC2 Instance
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceTypeEC2:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

    # Parameter for Database Instance
  #https://aws.amazon.com/rds/mysql/instance-types/
  InstanceTypeDB:
    Description: WebServer DB instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: [db.t2.micro, db.t2.small, db.t2.medium]
    ConstraintDescription: must be a valid Mysql instance type
  
  DBAllocatedStorage:
    Default: '20'
    Type: Number
    Description: The size of the database (Gb)
    MinValue: '20'
    MaxValue: '40'
    ConstraintDescription: must be between 20 and 40Gb.
  
  DBName:
    Default: MyAmazingDB
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  
  # replace with parameter store if time
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  
  DBPassword:
    NoEcho: 'true'
    Description: "The database admin account password"
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.

  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.

  ReplicaDBCondition:
    Description: ReplicaDB database
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false

Conditions:
  Deploy-ReplicaDB: !Equals
    - !Ref ReplicaDBCondition
    - true

Resources:
# New vpc and 2 subnet public for the EC2 and private for the DB, route, IGW and GW
  PublicVpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
    
  Public1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref 'Public1ACidr'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: subnet1A-public-LB

  Public1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref 'Public1BCidr'
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: subnet1B-public-LB

  Private1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVpc
      CidrBlock: !Ref 'Private1ACidr'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: subnet1A-private

  Private1B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVpc
      CidrBlock: !Ref 'Private1BCidr'
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: subnet1B-private

    
  Private1C:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVpc
      CidrBlock: !Ref 'Private1CCidr'
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: subnet1C-private

  InternetGatewayPrivate:
    Type: AWS::EC2::InternetGateway
    
  Gateway1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PublicVpc
      InternetGatewayId: !Ref InternetGatewayPrivate
    
  PublicSubnetRoute:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVpc
      Tags: 
        - Key: Name
          Value: Public-Route
  
  PrivateSubnetRoute:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVpc
      Tags:
        - Key: Name
          Value: Public-Route

  SubnetRoutePublic1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1A
      RouteTableId: !Ref PublicSubnetRoute
  
  SubnetRoutePublic1B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1B
      RouteTableId: !Ref PublicSubnetRoute
    
  SubnetRoutePrivate1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Private1A
      RouteTableId: !Ref PrivateSubnetRoute

  SubnetRoutePrivate1B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Private1B
      RouteTableId: !Ref PrivateSubnetRoute

  SubnetRoutePrivate1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Private1C
      RouteTableId: !Ref PrivateSubnetRoute    

  #Assign routing rule to route tables (default rule does not need to be assigned)
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicSubnetRoute
      GatewayId: !Ref InternetGatewayPrivate

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: MasterDB
    Properties:
      InstanceType: !Ref 'InstanceTypeEC2'
      # if any issue with az-a within the region change to az b
      SubnetId: !Ref Public1A
      SecurityGroupIds: [!GetAtt [InstanceSecurityGroupEC2, GroupId]]
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      UserData:
        Fn::Base64: 
          !Sub |
            #cloud-config
            write_files:
              - path: test.txt
                content: "97LEDKYGOF6C56Q4GYR"
            yum_repos:
              mariadb:
                baseurl: http://yum.mariadb.org/10.5/centos7-amd64
                gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
                gpgcheck: true
                enabled: true
                name: Package for MariaDB - fork Mysql
            package_update: true
            package_upgrade: true
            package_reboot_if_required: true
            packages:
              - MariaDB-client

            runcmd:
              - echo "[client]" >> "config.cnf"
              - echo "user=${DBUser}" >> "config.cnf"
              - echo "password=${DBPassword}" >> "config.cnf"
              - echo "host=${MasterDB.Endpoint.Address}" >> "config.cnf"
              - echo "database=${DBName}" >> "config.cnf"
              - mysql --defaults-file=/config.cnf -e "CREATE TABLE CandidateTest2(description TEXT)"
              - rm -f config.cnf

      Tags:
        -
          Key: Name
          Value: !Sub '${AWS::StackName}-ec2'
    
  InstanceSecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref PublicVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access from the Instance Only
      VpcId: !Ref PublicVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt [InstanceSecurityGroupEC2, GroupId]

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Subnet group containing the 2 private subnets
      SubnetIds: 
        - !Ref Private1A
        - !Ref Private1B
        - !Ref Private1C
      Tags: 
        - 
          Key: Name
          Value: GroupSubnetPrivateRDS
  
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: master-db-microproject-jusi
      DBName: !Ref 'DBName'
      StorageType: gp2
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'InstanceTypeDB'
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      # require access on parameter store on parameter 
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      BackupRetentionPeriod: 7
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
      - Key: Name
        Value: Master Database
      VPCSecurityGroups: 
        - !GetAtt [DBEC2SecurityGroup, GroupId]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot


  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Condition: Deploy-ReplicaDB
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDB'
      DBInstanceClass: !Ref 'InstanceTypeDB'
      SourceRegion: !Ref 'AWS::Region'
      VPCSecurityGroups: 
        - !GetAtt [DBEC2SecurityGroup, GroupId]
      Tags:
      - Key: Name
        Value: Read Replica SuperDB

Outputs:
  InstanceIdEC2:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZInstanceIdEC2:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNSInstanceIdEC2:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIPInstanceIdEC2:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  MasterEndpointAddress:
    Description: Endpoint to connect to Master
    Value: !GetAtt [MasterDB, Endpoint.Address]
  DatabaseName:
    Description: Name of the Database
    Value: !Ref 'DBName'
  ReplicaEndpointAddress:
    Description: Endpoint to connect to Replica DB
    Value: !GetAtt [ReplicaDB, Endpoint.Address]
    Condition: Deploy-ReplicaDB